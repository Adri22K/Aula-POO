// Source code is decompiled from a .class file using FernFlower decompiler.
package com.biblioteca.model.dao;

import com.biblioteca.config.DBConfig;
import com.biblioteca.model.entity.Livro;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class LivroDAO implements IDAO<Livro> {
   private static final String INSERT_QUERY = "INSERT INTO livro (titulo, autor, num_paginas) VALUES (?, ?, ?)";
   private static final String UPDATE_QUERY = "UPDATE livro SET titulo=?, autor=?, num_paginas=? WHERE id=?";
   private static final String DELETE_QUERY = "DELETE FROM livro WHERE id=?";
   private static final String SELECT_QUERY = "SELECT * FROM livro";
   private static final String SELECT_BY_ID_QUERY = "SELECT * FROM livro WHERE id=?";

   public LivroDAO() {
   }

   public void cadastrar(Livro livro) {
      try {
         Throwable var2 = null;
         Object var3 = null;

         try {
            Connection conn = DBConfig.getConnection();

            try {
               PreparedStatement stmt = conn.prepareStatement("INSERT INTO livro (titulo, autor, num_paginas) VALUES (?, ?, ?)");

               try {
                  stmt.setString(1, livro.getTitulo());
                  stmt.setString(2, livro.getAutor());
                  stmt.setInt(3, livro.getNumPaginas());
                  stmt.executeUpdate();
               } finally {
                  if (stmt != null) {
                     stmt.close();
                  }

               }
            } catch (Throwable var19) {
               if (var2 == null) {
                  var2 = var19;
               } else if (var2 != var19) {
                  var2.addSuppressed(var19);
               }

               if (conn != null) {
                  conn.close();
               }

               throw var2;
            }

            if (conn != null) {
               conn.close();
            }
         } catch (Throwable var20) {
            if (var2 == null) {
               var2 = var20;
            } else if (var2 != var20) {
               var2.addSuppressed(var20);
            }

            throw var2;
         }
      } catch (SQLException var21) {
         var21.printStackTrace();
      }

   }

   public void atualizar(Livro livro) {
      try {
         Throwable var2 = null;
         Object var3 = null;

         try {
            Connection conn = DBConfig.getConnection();

            try {
               PreparedStatement stmt = conn.prepareStatement("UPDATE livro SET titulo=?, autor=?, num_paginas=? WHERE id=?");

               try {
                  stmt.setString(1, livro.getTitulo());
                  stmt.setString(2, livro.getAutor());
                  stmt.setInt(3, livro.getNumPaginas());
                  stmt.setInt(4, livro.getId());
                  stmt.executeUpdate();
               } finally {
                  if (stmt != null) {
                     stmt.close();
                  }

               }
            } catch (Throwable var19) {
               if (var2 == null) {
                  var2 = var19;
               } else if (var2 != var19) {
                  var2.addSuppressed(var19);
               }

               if (conn != null) {
                  conn.close();
               }

               throw var2;
            }

            if (conn != null) {
               conn.close();
            }
         } catch (Throwable var20) {
            if (var2 == null) {
               var2 = var20;
            } else if (var2 != var20) {
               var2.addSuppressed(var20);
            }

            throw var2;
         }
      } catch (SQLException var21) {
         var21.printStackTrace();
      }

   }

   public void excluir(int id) {
      try {
         Throwable var2 = null;
         Object var3 = null;

         try {
            Connection conn = DBConfig.getConnection();

            try {
               PreparedStatement stmt = conn.prepareStatement("DELETE FROM livro WHERE id=?");

               try {
                  stmt.setInt(1, id);
                  stmt.executeUpdate();
               } finally {
                  if (stmt != null) {
                     stmt.close();
                  }

               }
            } catch (Throwable var19) {
               if (var2 == null) {
                  var2 = var19;
               } else if (var2 != var19) {
                  var2.addSuppressed(var19);
               }

               if (conn != null) {
                  conn.close();
               }

               throw var2;
            }

            if (conn != null) {
               conn.close();
            }
         } catch (Throwable var20) {
            if (var2 == null) {
               var2 = var20;
            } else if (var2 != var20) {
               var2.addSuppressed(var20);
            }

            throw var2;
         }
      } catch (SQLException var21) {
         var21.printStackTrace();
      }

   }

   public Livro buscar(int id) {
      Livro livro = null;

      try {
         Throwable var3 = null;
         Object var4 = null;

         try {
            Connection conn = DBConfig.getConnection();

            try {
               PreparedStatement stmt = conn.prepareStatement("SELECT * FROM livro WHERE id=?");

               try {
                  stmt.setInt(1, id);
                  Throwable var7 = null;
                  Object var8 = null;

                  try {
                     ResultSet rs = stmt.executeQuery();

                     try {
                        if (rs.next()) {
                           livro = new Livro(rs.getInt("id"), rs.getString("titulo"), rs.getString("autor"), rs.getInt("num_paginas"));
                        }
                     } finally {
                        if (rs != null) {
                           rs.close();
                        }

                     }
                  } catch (Throwable var41) {
                     if (var7 == null) {
                        var7 = var41;
                     } else if (var7 != var41) {
                        var7.addSuppressed(var41);
                     }

                     throw var7;
                  }
               } finally {
                  if (stmt != null) {
                     stmt.close();
                  }

               }
            } catch (Throwable var43) {
               if (var3 == null) {
                  var3 = var43;
               } else if (var3 != var43) {
                  var3.addSuppressed(var43);
               }

               if (conn != null) {
                  conn.close();
               }

               throw var3;
            }

            if (conn != null) {
               conn.close();
            }
         } catch (Throwable var44) {
            if (var3 == null) {
               var3 = var44;
            } else if (var3 != var44) {
               var3.addSuppressed(var44);
            }

            throw var3;
         }
      } catch (SQLException var45) {
         var45.printStackTrace();
      }

      return livro;
   }

   public List<Livro> listar() {
      List<Livro> livros = new ArrayList();

      try {
         Throwable var2 = null;
         Object var3 = null;

         try {
            Connection conn = DBConfig.getConnection();

            try {
               PreparedStatement stmt = conn.prepareStatement("SELECT * FROM livro");

               try {
                  ResultSet rs = stmt.executeQuery();

                  try {
                     while(rs.next()) {
                        Livro livro = new Livro(rs.getInt("id"), rs.getString("titulo"), rs.getString("autor"), rs.getInt("num_paginas"));
                        livros.add(livro);
                     }
                  } finally {
                     if (rs != null) {
                        rs.close();
                     }

                  }
               } catch (Throwable var29) {
                  if (var2 == null) {
                     var2 = var29;
                  } else if (var2 != var29) {
                     var2.addSuppressed(var29);
                  }

                  if (stmt != null) {
                     stmt.close();
                  }

                  throw var2;
               }

               if (stmt != null) {
                  stmt.close();
               }
            } catch (Throwable var30) {
               if (var2 == null) {
                  var2 = var30;
               } else if (var2 != var30) {
                  var2.addSuppressed(var30);
               }

               if (conn != null) {
                  conn.close();
               }

               throw var2;
            }

            if (conn != null) {
               conn.close();
            }
         } catch (Throwable var31) {
            if (var2 == null) {
               var2 = var31;
            } else if (var2 != var31) {
               var2.addSuppressed(var31);
            }

            throw var2;
         }
      } catch (SQLException var32) {
         var32.printStackTrace();
      }

      return livros;
   }

   public void alugar(int aluguel) {
      throw new UnsupportedOperationException("Unimplemented method 'alugar'");
   }
}
